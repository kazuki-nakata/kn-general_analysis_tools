#!/usr/bin/env python
import sys
import numpy as np
import os
import respack
import arcpy
import scipy
import time
import ConfigParser
#-----------initialize------------
fort_path=os.path.split(os.path.split(respack.__file__)[0])[0]

tool_path=os.path.split(fort_path)[0]

arcpy.gp.overwriteOutput=True

inLayer = arcpy.GetParameterAsText(0)
outLayer = arcpy.GetParameterAsText(1)
tempDir = arcpy.GetParameterAsText(2)
tempImg = arcpy.GetParameterAsText(3)
mode1 = arcpy.GetParameter(4)
mode2 = arcpy.GetParameter(5)

bitNum = arcpy.GetParameter(6)
bandB = arcpy.GetParameter(7) -1
bandG = arcpy.GetParameter(8) - 1
bandR = arcpy.GetParameter(9) - 1
bandN = arcpy.GetParameter(10) - 1

bitNumt = arcpy.GetParameter(11)
bandBt = arcpy.GetParameter(12) - 1
bandGt = arcpy.GetParameter(13) - 1
bandRt = arcpy.GetParameter(14) - 1
bandNt = arcpy.GetParameter(15) - 1

cdepth=2**bitNum
cdeptht=2**bitNumt

arcpy.AddMessage("inLayer = {}".format(inLayer))
arcpy.AddMessage("outLayer = {}".format(outLayer))
arcpy.AddMessage("tempDir = {}".format(tempDir))
arcpy.AddMessage("tempImg = {}".format(tempImg))
arcpy.AddMessage("mode1 = {}".format(mode1))
arcpy.AddMessage("mode2 = {}".format(mode2))


#--------------set parameters-------------------
if mode2:   #for high resolution
 parameters='HIGH_RESOLUTION'
else:       #for low resolution
 parameters='LOW_RESOLUTION' 
#------------------------------------------------
config=ConfigParser.ConfigParser()
inifile=os.path.join(tool_path,"Scripts\\template_matching.ini")
config.read(inifile)
ndvi_thres=config.get(parameters,'ndvi_thres')
confidence_thres=config.get(parameters,'confidence_thres')
scale_thres=config.get(parameters,'scale_thres')
bbs_thres=config.get(parameters,'bbs_thres')

arcpy.AddMessage("thres1 = {}".format(ndvi_thres))
arcpy.AddMessage("thres2 = {}".format(confidence_thres))
arcpy.AddMessage("thres3 = {}".format(scale_thres))
arcpy.AddMessage("thres4 = {}".format(bbs_thres))  
#---------------------------------------------


ltfile=os.path.join(fort_path,"src\\lookuptable.txt")

if mode2:
 width=17
 length=17
else:
 width=17
 length=17

if mode1:
 rasTempImg = arcpy.Raster(tempImg)
 arrTempImg = arcpy.RasterToNumPyArray(rasTempImg)
 ksize=arrTempImg.shape[0]
 jsize=arrTempImg.shape[1]
 isize=arrTempImg.shape[2]

 if bandBt >= 0:
  arrTempImg[[bandBt],:,:],arrTempImg[[0],:,:]=arrTempImg[[0],:,:],arrTempImg[[bandBt],:,:]

 if bandGt >= 1:
  arrTempImg[[bandGt],:,:],arrTempImg[[1],:,:]=arrTempImg[[1],:,:],arrTempImg[[bandGt],:,:]

 if bandRt >= 2:
  arrTempImg[[bandRt],:,:],arrTempImg[[2],:,:]=arrTempImg[[2],:,:],arrTempImg[[bandRt],:,:]

 if bandNt >= 3:
  arrTempImg[[bandNt],:,:],arrTempImg[[3],:,:]=arrTempImg[[3],:,:],arrTempImg[[bandNt],:,:]

 arrTempImgMod=np.zeros((1,ksize,jsize,isize))
 arrTempImgMod=arrTempImgMod.astype(np.float32)
 arrTempImgMod[0,:,:,:]=arrTempImg[:,:,:]
 arrTempImgMod[:,0:4,:,:]=arrTempImgMod[:,0:4,:,:]/float(cdeptht)

else:

 file_list = os.listdir(tempDir)

 num2=0
 for file_name in file_list:
  root, ext = os.path.splitext(file_name)
  if ext == u'.tif':
   num2=num2+1

 num=0
 for file_name in file_list:
  root, ext = os.path.splitext(file_name)
  
  if ext == u'.tif':
   tempImg = tempDir + '\\' + file_name
   arcpy.AddMessage("InputTemplate = {}".format(tempImg))
   rasTempImg = arcpy.Raster(tempImg)
   arrTempImg = arcpy.RasterToNumPyArray(rasTempImg)
   if bandBt >= 0:
    arrTempImg[[bandBt],:,:],arrTempImg[[0],:,:]=arrTempImg[[0],:,:],arrTempImg[[bandBt],:,:]

   if bandGt >= 1:
    arrTempImg[[bandGt],:,:],arrTempImg[[1],:,:]=arrTempImg[[1],:,:],arrTempImg[[bandGt],:,:]

   if bandRt >= 2:
    arrTempImg[[bandRt],:,:],arrTempImg[[2],:,:]=arrTempImg[[2],:,:],arrTempImg[[bandRt],:,:]

   if bandNt >= 3:
    arrTempImg[[bandNt],:,:],arrTempImg[[3],:,:]=arrTempImg[[3],:,:],arrTempImg[[bandNt],:,:]
   
   if num ==0:
    ksize=arrTempImg.shape[0]
    jsize=arrTempImg.shape[1]
    isize=arrTempImg.shape[2]
   
    arrTempImgMod=np.zeros((num2,ksize,length,width))
    arrTempImgMod=arrTempImgMod.astype(np.float32)

    print str(width) + '-' + str(length)
   
   arrTempImgRes=respack.template_matching_hr.resize(arrTempImg,ksize,length,width)    
   arrTempImgMod[num,:,:,:]=arrTempImgRes
   num=1+num
   
# arrTempImgMod=arrTempImg.astype(np.float32)
 arrTempImgMod[:,0:4,:,:]=arrTempImgMod[:,0:4,:,:]/float(cdeptht)
 
#---------------------------------------------
  
if mode2:
 template_matching=respack.template_matching_hr.landslide_detection
else:
 template_matching=respack.template_matching_lr.landslide_detection
 
desc = arcpy.Describe(inLayer)
layerPath = desc.catalogPath
descPath = desc.path
outputPath = os.path.join(descPath, "output.shp")

#----------------------------------------
arcpy.AddMessage("Convert Raster into Array")
startTime = float(time.time())
inRaster = arcpy.Raster(inLayer)
inArray = arcpy.RasterToNumPyArray(inRaster)

if bandB >= 0:
 inArray[[bandB],:,:],inArray[[0],:,:]=inArray[[0],:,:],inArray[[bandB],:,:]

if bandG >= 1:
 inArray[[bandG],:,:],inArray[[1],:,:]=inArray[[1],:,:],inArray[[bandG],:,:]

if bandR >= 2:
 inArray[[bandR],:,:],inArray[[2],:,:]=inArray[[2],:,:],inArray[[bandR],:,:]

if bandN >= 3:
 inArray[[bandN],:,:],inArray[[3],:,:]=inArray[[3],:,:],inArray[[bandN],:,:]

inArray=inArray.astype(np.float32)
inArray[0:4,:,:]=inArray[0:4,:,:]/float(cdepth)

ksize=inArray.shape[0]
jsize=inArray.shape[1]
isize=inArray.shape[2]

ijksize=ksize,jsize,isize
ijsize=jsize,isize
arcpy.AddMessage(ijksize)
data_o1=np.zeros(ijsize,dtype=np.int32)
endTime = float(time.time())
arcpy.AddMessage(endTime-startTime)

#--------calculation------------
arcpy.AddMessage("Calculation")
startTime = float(time.time())
data_o1=template_matching(inArray,arrTempImgMod,ltfile,ndvi_thres,bbs_thres,confidence_thres,scale_thres)
endTime = float(time.time())
arcpy.AddMessage(endTime-startTime)

#-------output---------
arcpy.AddMessage("Make the result layers")
startTime = float(time.time())
cx= inRaster.meanCellWidth
cy= inRaster.meanCellHeight
mx = inRaster.extent.XMin
my = inRaster.extent.YMin

llc=arcpy.Point(mx,my)
sr=inRaster.spatialReference
outRaster1 = arcpy.NumPyArrayToRaster(data_o1,llc,cx,cy,0)
arcpy.DefineProjection_management(outRaster1,sr)

#-------test--------------
#outRaster2=arcpy.MakeRasterLayer_management(outRaster1, "outRaster2")
#arcpy.SetParameterAsText(1,outRaster2)
#------------------------

arcpy.RasterToPolygon_conversion(outRaster1,outLayer,"SIMPLIFY","VALUE")
arcpy.SetParameterAsText(1,outLayer)
endTime = float(time.time())
arcpy.AddMessage(endTime-startTime)
arcpy.AddMessage("Finish")
